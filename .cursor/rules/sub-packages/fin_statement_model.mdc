---
description: 
globs: 
alwaysApply: true
---
# Project Architecture: fin_statement_model

## Layer Structure & Responsibilities

The library is organized into distinct layers, each with a specific responsibility:

-   **`core/`**: The foundational layer. Contains the graph engine, all base node classes (`Node`, `CalculationNode`, `ForecastNode`) and their implementations, the calculation engine, metric registry, and core utilities. **Crucially, `core` must not import from any other `fin_statement_model` sub-package.**
-   **`preprocessing/`**: Handles data cleaning, normalization, and transformation logic *before* data enters the core graph or forecasting models. It's side-effect-free (no I/O).
-   **`statements/`**: Provides domain-specific helpers for financial statements (Balance Sheet, P&L, etc.), including schemas, builders, and formatting utilities.
-   **`io/`**: Manages all external data interfaces – reading data into the graph and exporting results. Sits at the edge of the system.
-   **`extensions/`**: Hosts optional, lazily-loaded plugins that extend functionality without altering core packages. Discovered via entry points.

## Import Dependency Matrix

This matrix defines the allowed import directions between layers. A '✓' means the 'From' layer *can* import the 'To' layer.

| From \ To         | core | preprocessing | statements | io | extensions |
|---------------    |:----:|:-------------:|:----------:|:--:|:----------:|
| **core**          | ✓    | ✗             | ✗          | ✗  | ✗          |
| **preprocessing** | ✓    | ✓             | ✗          | ✗  | ✗          |
| **statements**    | ✓    | ✓             | ✓          | ✗  | ✗          |
| **io**            | ✓    | ✓             | ✓          | ✓  | ✗          |
| **extensions**    | ✓    | ✓             | ✓          | ✓  | ✓          |

# Coding Standards & Conventions

-   **Python Version**: 3.9+
-   **Formatting**: `black` (100-char line length)
-   **Linting**: `ruff`
-   **Type Checking**: `mypy --strict`
-   **Docstrings**: Google-style for all public modules, classes, functions. Mandatory.
-   **Module Size**: Keep modules ≤ 300 LOC; split larger ones.
-   **Naming**:
    -   Nodes: `*Node` (e.g., `RevenueNode`, `COGSNode`)
    -   Calculations: `*CalculationNode`
    -   Forecasts: `*ForecastNode` (implement `forecast_value`)
    -   Metrics: `lowercase_with_underscores`
    -   Test files: `test_*.py`
-   **Standard Methods**:
    -   Calculations: `calculate(self) -> Numeric`
    -   Forecasts: `forecast_value(self, periods: int) -> pd.Series` (*Adjust return type if needed*)
-   **Imports**: Standard library -> Third-party -> `fin_statement_model` internal -> Relative. Use `__all__` in `__init__.py`.
-   **Error Handling**: All exceptions must inherit from `core.errors.FinStatementModelError`.
-   **Dependencies**:
    -   Core requires `numpy` and `pandas`.
    -   Heavy optional dependencies (e.g., `openai`, `torch` in `extensions/`) must be guarded by `try/except ImportError` and imported locally within functions/methods.

# Registries & Extensibility

-   **Metrics**: Register via `core.metrics.registry.register_metric`. Simple metrics in `core/metrics/builtin_organized/*.yaml`; complex ones as Python classes.
-   **I/O**: Readers/writers register with `io.readers.registry` / `io.writers.registry`.
-   **Extensions**: Use `importlib.metadata` entry points (`fin_statement_model.extensions.*`).

# Testing

-   Framework: `pytest` with `pytest-cov`.
-   Location: Tests mirror package structure under `tests/`.
-   Coverage: Maintain ≥ 80% branch coverage (enforced by CI).
-   Requirements: Tests must pass `black`, `ruff`, `mypy --strict`. New public APIs require tests.

# FAQ Cheatsheet

| Task                              | Preferred Location / API                               |
|-----------------------------------|--------------------------------------------------------|
| Add simple metric                 | `core/metrics/builtin_organized/<category>/<metric_name>.yaml`             |
| Add complex metric/calculation    | `core/nodes/<name>_node.py` (if stateful), or strategy in `core/strategies/` |
| Add new data reader (e.g., CSV)   | `io/readers/csv.py` + `register_reader("csv")`         |
| Add new data writer               | `io/writers/<format>.py` + `register_writer("<format>")`|
| Add data cleaning step            | `preprocessing/cleaning.py` (or similar module)        |
| Define statement structure        | `statements/definitions/<statement_type>.py` (or YAML) |
| Add optional ML feature           | `extensions/<feature_name>/...`                        |

---
This rule file provides a comprehensive overview of the `fin_statement_model` library's structure and conventions, ensuring consistency and maintainability.

# Purpose
`fin_statement_model.core` is the **foundation** of the library. It provides the graph engine, base node hierarchy (including data, calculation, and forecast nodes), calculation engine, metric registry, and core utilities. **Crucially, `core` must not import from any other `fin_statement_model` sub-package** (`statements/`, `io/`, `preprocessing/`, `extensions/`). Everything else depends **on** `core`.

# Exception Hierarchy
All exceptions must extend from `FinStatementModelError`:
```python
class FinStatementModelError(Exception):
    """Base exception for all fin_statement_model errors."""
    pass

class GraphError(FinStatementModelError):
    """Errors related to graph operations."""
    pass

class CalculationError(FinStatementModelError):
    """Errors during calculation execution."""
    pass

class MetricError(FinStatementModelError):
    """Errors related to metric definitions or registry."""
    pass
```

# Type System
- Core may use numpy arrays and pandas Series/DataFrames where beneficial for performance or API clarity. Prefer plain Python types for simple data structures, but numpy / pandas are core dependencies.

# Directory Responsibilities
| Sub‑package / module                 | Responsibility                                                              |
|--------------------------------------|-----------------------------------------------------------------------------|
| `core/graph/`                        | Pure graph algorithms: traversal, manipulation, cycle detection, IO         |
| `core/metrics/`                      | Metric definitions (YAML/Python), `registry.py`, and validation             |
| `core/nodes/`                        | Base classes (`Node`, `CalculationNode`, `ForecastNode`) and implementations for **all** node types. |
| `core/strategies/`                   | Calculation strategies (e.g., `Addition`, `Subtraction`, custom logic)      |
| `calculation_engine.py`              | Orchestrates evaluation of the graph based on node dependencies.            |
| `node_factory.py`                    | Dynamic node instantiation from configurations (e.g., YAML/JSON).           |
| `data_manager.py`                    | Potential in‑memory store / caching layer for node values (if implemented). |
| `errors.py`                          | Core‑level exceptions. Extend `FinStatementModelError`.                     |