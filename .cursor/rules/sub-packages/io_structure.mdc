---
description: 
globs: 
alwaysApply: true
---
# Purpose
`fin_statement_model.io` handles all **external data interfaces**: reading raw data into the system and exporting results to files, databases, or APIs. It acts as the bridge between the external world and the internal data structures.

# Layer Position & Dependencies
-   `io` sits at the **outer edge** of the application layers.
-   It **may import from**:
    -   `fin_statement_model.core` (e.g., to instantiate nodes, use core types)
    -   `fin_statement_model.preprocessing` (e.g., to apply cleaning steps after reading raw data)
    -   `fin_statement_model.statements` (e.g., to understand statement-specific schemas or formats during input/output)
-   It **must NOT be imported by**:
    -   `fin_statement_model.core`
    -   `fin_statement_model.preprocessing`
    -   `fin_statement_model.statements`
    -   `fin_statement_model.forecasting`
-   It **can be imported by**:
    -   `fin_statement_model.extensions`

# Key Responsibilities
-   Implementing **Readers**: Logic to parse data from sources like Excel, CSV, JSON, databases, APIs. Readers should typically convert external data into standard internal representations (like pandas DataFrames) before potentially handing off to `preprocessing` or constructing `core` nodes.
-   Implementing **Writers**: Logic to serialize internal data (e.g., graph structures, calculation results, forecast outputs) into various external formats.
-   **Registration**: Providing mechanisms (e.g., registries like `io.readers.registry` and `io.writers.registry`) for discovering and using different reader/writer implementations dynamically.
-   **Configuration**: Handling connection details, file paths, API keys, and format-specific options for I/O operations.

# Coding Conventions
-   Follow general project coding standards (black, ruff, mypy, Google docstrings).
-   Isolate I/O logic within this package. Avoid embedding direct file reads/writes or API calls deep within other layers like `core` or `statements`.
-   Handle I/O errors gracefully, potentially mapping external errors to specific `FinStatementModelError` subclasses if appropriate.
